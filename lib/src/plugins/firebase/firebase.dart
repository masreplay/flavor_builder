// Configure Firebase for your Flutter app. This command will fetch Firebase configuration for you and generate a Dart file with
// prefilled FirebaseOptions you can use.

// Usage: flutterfire configure [arguments]
// -h, --help                                            Print this usage information.
// -p, --project=<aliasOrProjectId>                      The Firebase project to use for this command.
// -e, --account=<email>                                 The Google account to use for authorization.
// -o, --out=<filePath>                                  The output file path of the Dart file that will be generated with your
//                                                       Firebase configuration options.
//                                                       (defaults to "lib/firebase_options.dart")
// -y, --yes                                             Skip the Y/n confirmation prompts and accept default options (such as
//                                                       detected platforms).
//     --platforms=<platforms>                           Optionally specify the platforms to generate configuration options for as a
//                                                       comma separated list. For example "android,ios,macos,web,linux,windows".
// -i, --ios-bundle-id=<bundleIdentifier>                The bundle identifier of your iOS app, e.g. "com.example.app".If no
//                                                       identifier is provided then an attempt will be made to automatically detect
//                                                       it from your "ios" folder (if it exists).
// -m, --macos-bundle-id=<bundleIdentifier>              The bundle identifier of your macOS app, e.g. "com.example.app". If no
//                                                       identifier is provided then an attempt will be made to automatically detect
//                                                       it from your "macos" folder (if it exists).
//     --android-app-id=<applicationId>                  DEPRECATED - use "android-package-name" instead. The application id of your
//                                                       Android app, e.g. "com.example.app". If no identifier is provided then an
//                                                       attempt will be made to automatically detect it from your "android" folder
//                                                       (if it exists)
// -a, --android-package-name=<packageName>              The package name of your Android app, e.g. "com.example.app". If no package
//                                                       name is provided then an attempt will be made to automatically detect it
//                                                       from your "android" folder (if it exists).
// -w, --web-app-id=<appId>                              The app id of your Web application, e.g. "1:XXX:web:YYY". If no app id is
//                                                       provided then an attempt will be made to automatically pick the first
//                                                       available web app id from remote. If no web app exists, we create a web app
//                                                       and suffix the name with "(web)"
// -x, --windows-app-id=<windowsAppId>                   The app id of your Windows application, e.g. "1:XXX:web:YYY". If no app id
//                                                       is provided then an attempt will be made to automatically pick the first
//                                                       available windows app id from remote. If no windows app exists, we create a
//                                                       web app for Windows platform. We suffix the name with "(windows)"
// -t, --token=<firebaseToken>                           The token generated by running `firebase login:ci`
//     --service-account=<serviceAccount>                The path to a Google service account JSON file, used for authentication
//     --ios-build-config=<iosBuildConfiguration>        Name of iOS build configuration to use for bundling
//                                                       `Google-Service-Info.plist` with your Xcode project
//     --macos-build-config=<macosBuildConfiguration>    Name of macOS build configuration to use for bundling
//                                                       `Google-Service-Info.plist` with your Xcode project
//     --ios-target=<iosTargetName>                      Name of iOS target to use for bundling `Google-Service-Info.plist` with your
//                                                       Xcode project
//     --macos-target=<macosTargetName>                  Name of macOS target to use for bundling `Google-Service-Info.plist` with
//                                                       your Xcode project
//     --ios-out=<pathForIosConfig>                      Where to write the `Google-Service-Info.plist` file for iOS platform. Useful
//                                                       for different flavors
//     --macos-out=<pathForMacosConfig>                  Where to write the `Google-Service-Info.plist` file to be written for macOS
//                                                       platform. Useful for different flavors
//     --android-out=<pathForAndroidConfig>              Where to write the `google-services.json` file to be written for android
//                                                       platform. Useful for different flavors
// -f, --[no-]overwrite-firebase-options                 Rewrite the service file if you're running 'flutterfire configure' again due
//                                                       to updating project

// Run "flutterfire help" to see global options.

import 'package:freezed_annotation/freezed_annotation.dart';

part 'firebase.freezed.dart';
part 'firebase.g.dart';

@freezed
class FlutterFireConfigure with _$FlutterFireConfigure {
  const FlutterFireConfigure._();
  const factory FlutterFireConfigure({
    String? project,
    String? account,
    String? out,
    bool? yes,
    String? platforms,
    String? iosBundleId,
    String? macosBundleId,
    String? androidAppId,
    String? androidPackageName,
    String? webAppId,
    String? windowsAppId,
    String? token,
    String? serviceAccount,
    String? iosBuildConfig,
    String? macosBuildConfig,
    String? iosTarget,
    String? macosTarget,
    String? iosOut,
    String? macosOut,
    String? androidOut,
    bool? overwriteFirebaseOptions,
  }) = _FlutterFireConfigure;

  factory FlutterFireConfigure.fromJson(Map<String, dynamic> json) =>
      _$FlutterFireConfigureFromJson(json);
}

String gen(FlutterFireConfigure config) {
  String command = 'flutterfire configure ';

  if (config.project != null) {
    command += '--project=${config.project} ';
  }

  if (config.account != null) {
    command += '--account=${config.account} ';
  }

  if (config.out != null) {
    command += '--out=${config.out} ';
  }

  if (config.yes != null) {
    command += '--yes ';
  }

  if (config.platforms != null) {
    command += '--platforms=${config.platforms} ';
  }

  if (config.iosBundleId != null) {
    command += '--ios-bundle-id=${config.iosBundleId} ';
  }

  if (config.macosBundleId != null) {
    command += '--macos-bundle-id=${config.macosBundleId} ';
  }

  if (config.androidAppId != null) {
    command += '--android-app-id=${config.androidAppId} ';
  }

  if (config.androidPackageName != null) {
    command += '--android-package-name=${config.androidPackageName} ';
  }

  if (config.webAppId != null) {
    command += '--web-app-id=${config.webAppId} ';
  }

  if (config.windowsAppId != null) {
    command += '--windows-app-id=${config.windowsAppId} ';
  }

  if (config.token != null) {
    command += '--token=${config.token} ';
  }

  if (config.serviceAccount != null) {
    command += '--service-account=${config.serviceAccount} ';
  }

  if (config.iosBuildConfig != null) {
    command += '--ios-build-config=${config.iosBuildConfig} ';
  }

  if (config.macosBuildConfig != null) {
    command += '--macos-build-config=${config.macosBuildConfig} ';
  }

  if (config.iosTarget != null) {
    command += '--ios-target=${config.iosTarget} ';
  }

  if (config.macosTarget != null) {
    command += '--macos-target=${config.macosTarget} ';
  }

  if (config.iosOut != null) {
    command += '--ios-out=${config.iosOut} ';
  }

  if (config.macosOut != null) {
    command += '--macos-out=${config.macosOut} ';
  }

  if (config.androidOut != null) {
    command += '--android-out=${config.androidOut} ';
  }

  if (config.overwriteFirebaseOptions != null) {
    command += '--overwrite-firebase-options ';
  }

  return command;
}

const String firebaseToken = '1//09Hl9keIxewcbCgYIARAAGAkSNwF-L9Ir9Fz9SmOWF1aIQncV8dZnwekTUKN-aFt0rsinAngFV-DP6NrYM1YkMBe4W2KG06DHPNM';
